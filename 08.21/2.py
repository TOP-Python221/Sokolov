from datetime import datetime


# ДОБАВИТЬ: документацию класса
class Date:
    def __init__(self,
                 date: int,
                 time_zone: int):
        self.date = date
        self.time_zone = time_zone

    # ДОБАВИТЬ: документацию не специального метода
    def time_zone(self):
        # ИСПРАВИТЬ: запутались в именах: сейчас в глобальном пространстве имён у вас есть импортированное имя класса datatime от которого вы вызываете классовый метод today() — а имени модуля datetime у вас в глобальном пространстве имён нет
        return datetime.datetime.today()

    # ДОБАВИТЬ: документацию не специального метода
    def future_time(self):
        # ИСПРАВИТЬ: это отдельный класс в модуле datetime и вам необходимо его дописать в первую строку импорта через запятую
        return datetime.timedelta(days=1)

# КОММЕНТАРИЙ: представьте, что вы работаете над чат-ботом для диалога с человеком — вам необходимо добавить ему возможность правильно выбирать вариант приветствия в зависимости от времени в текущем часовом поясе и часового пояса собеседника человека
# КОММЕНТАРИЙ: период суток в задании — это "утро", "день", "вечер", "ночь" — для времени в том или ином часовом поясе
# КОММЕНТАРИЙ: текущее время бота — это время на его сервере, которое можно узнать с помощью методов класса datetime; добавьте в свой класс метод для определения периода суток — этот метод должен принимать параметр, задающий в часах смещение от текущего часового пояса


# ДОБАВИТЬ: для начала стоит создать экземпляр класса Date
d1 = Date.time_zone()
print(d1.strftime("%A %d %B %Y"))

# КОММЕНТАРИЙ: а потом понять, что вообще происходит =)
d2 = Date.future_time()
print(d2)


# ДОБАВИТЬ: примеры выполнения скрипта в закомментированном виде под меткой tests
# tests:


# ИТОГ: переделать — 1/5
